{"name":"Simple-mapper","tagline":"A very simple POJO mapper based on getters/setters with support for inheritance, cyclic dependencies, and hooks.","body":"# Simple Mapper \r\n> I created this library because I'm tired of big xml-based or annotation-based mapping frameworks when all I need is a **very basic mapping** between business objects and lightweight DTOs with a similar structure.\r\n\r\n**Simple Mapper** is a java objects mapper meant to be very easy-to-use and intuitive. It looks for setters in the destination object and try to find the corresponding getter in the source object. It manages ```cyclic dependencies```, ```inheritance```, and ```hooks```.\r\n\r\n# Get it\r\n\r\nSimple Mapper is **available in Maven Central**:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.joanzapata.mapper</groupId>\r\n    <artifactId>simple-mapper</artifactId>\r\n    <version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\n# Basics\r\n\r\nYou do all the mapping with the ```Mapper``` object and its ```map()``` method.\r\n\r\n```java\r\n// First, create a ```Mapper``` object.\r\nMapper mapper = new Mapper();\r\n\r\n// Map a plain old java object with map()\r\nBookDTO bookDTO = mapper.map(book, BookDTO.class);\r\n\r\n// Mapper will detect lists and maps so you can do things like:\r\nList<BookDTO> bookListDTO = mapper.map(bookList, BookDTO.class);\r\nMap<Long, BookDTO> bookListDTO = mapper.map(bookMap, Long.class, BookDTO.class);\r\n```\r\n\r\n# Inheritance\r\n\r\nIf you need support for inheritance, you must provide the mappings of the subclasses:\r\n\r\n```java\r\nMapper mapper = new Mapper()\r\n    .addMapping(AddressEntry.class, AddressEntryDTO.class)\r\n    .addMapping(PhoneEntry.class, PhoneEntryDTO.class);\r\n```\r\n\r\n> You can register mapping in both directions by using the ```addBidirectionalMapping``` method:\r\n\r\n# Name binding\r\n\r\nThe mapper supports name variations, that means for example that ```public Book getBook()``` in the source object is considered as a valid candidate for ```public void setBookDTO(BookDTO bookDTO)``` in the destination object. The library currently manage ```DTO``` and ```BO``` accessor suffixes.\r\n\r\n# Hooks\r\n\r\nIf you need custom mapping or additional operations after some mappings, you can provide hooks:\r\n\r\n```java\r\nMapper mapper = new Mapper()\r\n    .addHook(new Hook<BookEntry, BookEntryDTO>() {\r\n        @Override\r\n        public void extraMapping(BookEntry source, BookEntryDTO destination) {\r\n            // Do additional operations in the destination object\r\n        }\r\n    };\r\n});\r\n```\r\n\r\n* Hooks are called **after** the object has been fully mapped.\r\n* Hooks are guaranteed to be called in the **order** you added them to the mapper. \r\n","google":"UA-41258927-1","note":"Don't delete this file! It's used internally to help with page regeneration."}