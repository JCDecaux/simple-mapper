{"name":"Simple-mapper","tagline":"A very simple POJO mapper based on getters/setters with inheritance support.","body":"# Simple Mapper \r\n> Note that this is a **0.0.1-SNAPSHOT** versions, it hasn't been deeply tested at all. I'm using it because I'm tired of big mapping frameworks when all I need is a very basic mapping between business objects and lightweight DTOs with the same structure.\r\n\r\n**Simple Mapper** is a java objects mapper meant to be very easy-to-use and intuitive. It looks for setters in the destination object and try to find the corresponding getter in the source object. It manages ```cyclic dependencies``` and ```inheritance```.\r\n\r\n# Get it\r\n\r\nIt's not in maven central yet, so you need to build it.\r\n\r\n```shell\r\ngit clone https://github.com/JoanZapata/simple-mapper.git\r\ncd simple-mapper\r\nmvn install\r\n```\r\n\r\nThen include it in your ```pom.xml```\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.joanzapata.mapper</groupId>\r\n    <artifactId>simple-mapper</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n# Basics\r\n\r\nFor the basics, just provide the source object and the destination:\r\n\r\n```java\r\nMapper mapper = new Mapper();\r\nBookDTO bookDTO = mapper.map(book, BookDTO.class);\r\n```\r\n\r\nTo convert a list, exactly the same:\r\n\r\n```java\r\nList<BookDTO> bookListDTO = mapper.map(bookList, BookDTO.class);\r\n```\r\n\r\nTo convert a map, you need to specify both the key type and the value type.\r\n\r\n```java\r\nMap<Long, Book> bookInput = new HashMap<Long, Book>();\r\n...\r\nMap<Long, BookDTO> bookListDTO = mapper.map(bookMap, Long.class, BookDTO.class);\r\n```\r\n\r\n# Inheritance\r\n\r\nIf you need support for inheritance, you must provide the mappings of the subclasses:\r\n\r\n```java\r\nMapper mapper = new Mapper()\r\n    .addMapping(AddressEntry.class, AddressEntryDTO.class)\r\n    .addMapping(PhoneEntry.class, PhoneEntryDTO.class);\r\n```\r\n\r\nNote that you can register mapping in both directions by using the ```addBidirectionalMapping``` method:\r\n\r\n```java\r\nMapper mapper = new Mapper()\r\n    .addBidirectionalMapping(AddressEntry.class, AddressEntryDTO.class)\r\n    .addBidirectionalMapping(PhoneEntry.class, PhoneEntryDTO.class);\r\n```\r\n\r\n# Name binding\r\n\r\nThe mapper supports name variations, that means for example that ```public Book getBook()``` can be used to fill ```public void setBookDTO(BookDTO bookDTO)```. The library currently manage ```DTO``` and ```BO``` accessor suffixes. \r\n\r\n# Hooks\r\n\r\nYou can easily provide hooks on some mappings.\r\n\r\n```java\r\nMapper mapper = new Mapper()\r\n    .addHook(new Hook<BookEntry, BookEntryDTO>() {\r\n        @Override\r\n        public void extraMapping(BookEntry source, BookEntryDTO destination) {\r\n            // Do something in the destination object\r\n        }\r\n    };\r\n});\r\n```\r\n\r\n> Hooks are called **after** the object has been fully mapped.\r\n\r\n> Hooks are guarantied to be called in the **order** you added them to the mapper. ","google":"UA-41258927-1","note":"Don't delete this file! It's used internally to help with page regeneration."}